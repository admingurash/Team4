{"ast":null,"code":"var _jsxFileName = \"F:\\\\team4\\\\client\\\\src\\\\Scanner.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport './Scanner.css';\n\n// Use your computer's IP address\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst SERVER_URL = 'http://10.201.5.85:3000';\nconst Scanner = () => {\n  _s();\n  const [cardId, setCardId] = useState('');\n  const [message, setMessage] = useState('');\n  const [scans, setScans] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const handleScan = async e => {\n    e.preventDefault();\n    setIsLoading(true);\n    try {\n      const response = await fetch(`${SERVER_URL}/api/scan?cardId=${cardId}`);\n      const data = await response.json();\n      if (data.success) {\n        setMessage('Card scanned successfully!');\n        setCardId('');\n        fetchRecentScans();\n      } else {\n        setMessage('Scan failed. Please try again.');\n      }\n    } catch (error) {\n      setMessage('Error connecting to server. Please try again.');\n    }\n    setIsLoading(false);\n  };\n  const fetchRecentScans = async () => {\n    try {\n      const response = await fetch(`${SERVER_URL}/api/scans`);\n      const data = await response.json();\n      setScans(data);\n    } catch (error) {\n      console.error('Error fetching scans:', error);\n    }\n  };\n  useEffect(() => {\n    fetchRecentScans();\n    const interval = setInterval(fetchRecentScans, 5000); // Refresh every 5 seconds\n    return () => clearInterval(interval);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"scanner-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Card Scanner\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n      onSubmit: handleScan,\n      className: \"scan-form\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: cardId,\n        onChange: e => setCardId(e.target.value),\n        placeholder: \"Enter or Scan Card ID\",\n        required: true,\n        className: \"card-input\",\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        type: \"submit\",\n        disabled: isLoading,\n        className: \"scan-button\",\n        children: isLoading ? 'Scanning...' : 'Scan Card'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 62,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this), message && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: `message ${message.includes('successfully') ? 'success' : 'error'}`,\n      children: message\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"recent-scans\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Recent Scans\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"scans-list\",\n        children: scans.map(scan => /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"scan-item\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scan-time\",\n            children: new Date(scan.timestamp).toLocaleTimeString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 78,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scan-id\",\n            children: [\"Card ID: \", scan.cardId]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"scan-status\",\n            children: [\"Status: \", scan.status]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 15\n          }, this)]\n        }, scan.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 77,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 49,\n    columnNumber: 5\n  }, this);\n};\n_s(Scanner, \"j/hKyuQWHiwGlmNAiWXiz8+ympk=\");\n_c = Scanner;\nexport default Scanner;\nvar _c;\n$RefreshReg$(_c, \"Scanner\");","map":{"version":3,"names":["React","useState","useEffect","jsxDEV","_jsxDEV","SERVER_URL","Scanner","_s","cardId","setCardId","message","setMessage","scans","setScans","isLoading","setIsLoading","handleScan","e","preventDefault","response","fetch","data","json","success","fetchRecentScans","error","console","interval","setInterval","clearInterval","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onSubmit","type","value","onChange","target","placeholder","required","autoFocus","disabled","includes","map","scan","Date","timestamp","toLocaleTimeString","status","id","_c","$RefreshReg$"],"sources":["F:/team4/client/src/Scanner.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport './Scanner.css';\r\n\r\n// Use your computer's IP address\r\nconst SERVER_URL = 'http://10.201.5.85:3000';\r\n\r\nconst Scanner: React.FC = () => {\r\n  const [cardId, setCardId] = useState('');\r\n  const [message, setMessage] = useState('');\r\n  const [scans, setScans] = useState<any[]>([]);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n\r\n  const handleScan = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    setIsLoading(true);\r\n    try {\r\n      const response = await fetch(`${SERVER_URL}/api/scan?cardId=${cardId}`);\r\n      const data = await response.json();\r\n      if (data.success) {\r\n        setMessage('Card scanned successfully!');\r\n        setCardId('');\r\n        fetchRecentScans();\r\n      } else {\r\n        setMessage('Scan failed. Please try again.');\r\n      }\r\n    } catch (error) {\r\n      setMessage('Error connecting to server. Please try again.');\r\n    }\r\n    setIsLoading(false);\r\n  };\r\n\r\n  const fetchRecentScans = async () => {\r\n    try {\r\n      const response = await fetch(`${SERVER_URL}/api/scans`);\r\n      const data = await response.json();\r\n      setScans(data);\r\n    } catch (error) {\r\n      console.error('Error fetching scans:', error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchRecentScans();\r\n    const interval = setInterval(fetchRecentScans, 5000); // Refresh every 5 seconds\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"scanner-container\">\r\n      <h1>Card Scanner</h1>\r\n      \r\n      <form onSubmit={handleScan} className=\"scan-form\">\r\n        <input\r\n          type=\"text\"\r\n          value={cardId}\r\n          onChange={(e) => setCardId(e.target.value)}\r\n          placeholder=\"Enter or Scan Card ID\"\r\n          required\r\n          className=\"card-input\"\r\n          autoFocus\r\n        />\r\n        <button type=\"submit\" disabled={isLoading} className=\"scan-button\">\r\n          {isLoading ? 'Scanning...' : 'Scan Card'}\r\n        </button>\r\n      </form>\r\n\r\n      {message && (\r\n        <div className={`message ${message.includes('successfully') ? 'success' : 'error'}`}>\r\n          {message}\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"recent-scans\">\r\n        <h2>Recent Scans</h2>\r\n        <div className=\"scans-list\">\r\n          {scans.map((scan) => (\r\n            <div key={scan.id} className=\"scan-item\">\r\n              <div className=\"scan-time\">\r\n                {new Date(scan.timestamp).toLocaleTimeString()}\r\n              </div>\r\n              <div className=\"scan-id\">\r\n                Card ID: {scan.cardId}\r\n              </div>\r\n              <div className=\"scan-status\">\r\n                Status: {scan.status}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Scanner; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}